{
	"info": {
		"_postman_id": "11611617-4d83-4ebb-8295-0ae92e8df28d",
		"name": "ServeRest - Espelho",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18111986"
	},
	"item": [
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "Todos usuarios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/usuarios",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuarios por nome",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarUsuario = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoUsuario\"))\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(cadastrarUsuario, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"_id\", res.json()._id)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const lodash = require(\"lodash\");\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if (jsonData.usuarios.length > 0) {\r",
											"    pm.test(\"Verifica nomes retornados no array\", function () {\r",
											"\r",
											"        lodash.forEach(jsonData.usuarios, function(usuario) {\r",
											"            pm.expect(usuario.nome).to.eql(pm.environment.get(\"nome\"));\r",
											"        })\r",
											"    })\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios/\" + pm.environment.get(\"_id\"),\r",
											"    method: \"DELETE\"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/usuarios?nome={{nome}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "nome",
											"value": "{{nome}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuario por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar dados do usuario\", function () {\r",
											"    pm.expect(jsonData.nome).to.eql(pm.environment.get(\"nome\"));\r",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email\"));\r",
											"    pm.expect(jsonData.password).to.eql(pm.environment.get(\"password\"));\r",
											"    pm.expect(jsonData.administrador).to.eql(pm.environment.get(\"administrador\"));\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios/\" + pm.environment.get(\"_id\"),\r",
											"    method: \"DELETE\"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarUsuario = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoUsuario\"))\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(cadastrarUsuario, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"_id\", res.json()._id)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/usuarios/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuario por ID inexistente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"idInvalido\", pm.environment.get(\"_id\") + \"Alyson\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de usuario não encontrado\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/usuarios/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idInvalido}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Usuario com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica mensagem de cadastro com sucesso\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
											"})\r",
											"\r",
											"pm.test(\"Verifica id não nulo\", function () {\r",
											"    pm.expect(jsonData._id).to.not.be.null;\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios/\" + jsonData._id,\r",
											"    method: \"DELETE\"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"administrador\": \"{{administrador}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/usuarios",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuario email existente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarUsuario = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoUsuario\"))\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(cadastrarUsuario, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"_id\", res.json()._id)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios/\" + pm.environment.get(\"_id\"),\r",
											"    method: \"DELETE\"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"administrador\": \"{{administrador}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/usuarios",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Usuario com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"novoNome\", pm.variables.replaceIn('{{randomFullname}}'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verificar atualização de usuario com sucesso\", function() {\r",
											"    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\")\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{novoNome}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"administrador\": \"{{administrador}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/usuarios/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuario email existente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const buscarUsuario = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios\",\r",
											"    method: \"GET\"\r",
											"};\r",
											"pm.sendRequest(buscarUsuario, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"emailExistente\", res.json().usuarios[0].email)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica mensagem do body\", function() {\r",
											"    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"email\": \"{{emailExistente}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"administrador\": \"{{administrador}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/usuarios/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuario com campos em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar response body\", function() {\r",
											"    pm.expect(jsonData.nome).to.eql(\"nome não pode ficar em branco\");\r",
											"    pm.expect(jsonData.email).to.eql(\"email não pode ficar em branco\");\r",
											"    pm.expect(jsonData.password).to.eql(\"password não pode ficar em branco\");\r",
											"    pm.expect(jsonData.administrador).to.eql(\"administrador deve ser 'true' ou 'false'\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/usuarios/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"const cadastrarUsuario = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/usuarios\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify(pm.environment.get(\"novoUsuario\"))\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(cadastrarUsuario, function(err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.environment.set(\"_id\", res.json()._id)\r",
									"})\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"base_url\") + \"/usuarios/\" + pm.environment.get(\"_id\"),\r",
									"    method: \"DELETE\"\r",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Usuario com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarUsuario = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/usuarios\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoUsuario\"))\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(cadastrarUsuario, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"_id\", res.json()._id);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/usuarios/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuario com ID inexistente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"idInexistente\", pm.environment.get(\"_id\") + \"Alyson\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica mensagem no body\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/usuarios/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// selecione aleatoriamente nome e adicione à variável de amebiente\r",
							"pm.environment.set(\"nome\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"// selecione aleatoriamente email e adicione à variável de ambiente\r",
							"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
							"\r",
							"// selecione aleatoriamente senha e adicione à variável password\r",
							"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));\r",
							"\r",
							"// selecione aleatoriamente um valor booleano e adicione à variável administrador\r",
							"pm.environment.set(\"administrador\", pm.variables.replaceIn('{{$randomBoolean}}'));\r",
							"\r",
							"const usuario = {\r",
							"    \"nome\" : pm.environment.get(\"nome\"),\r",
							"    \"email\": pm.environment.get(\"email\"),\r",
							"    \"password\": pm.environment.get(\"password\"),\r",
							"    \"administrador\": pm.environment.get(\"administrador\")\r",
							"}\r",
							"pm.environment.set(\"novoUsuario\", usuario);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}